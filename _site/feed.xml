

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://lixelsoft.github.io/</id>
  <title>Lixelsoft</title>
  <subtitle>Lixelsoft Tech Blog</subtitle>
  <updated>2021-09-01T07:22:49+09:00</updated>
  <author>
    <name>Lixelsoft</name>
    <uri>https://lixelsoft.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://lixelsoft.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://lixelsoft.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Lixelsoft </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Firebase CloudFunction Security</title>
    <link href="https://lixelsoft.github.io/posts/firebase-cloudfunction-security/" rel="alternate" type="text/html" title="Firebase CloudFunction Security" />
    <published>2021-08-31T06:00:00+09:00</published>
  
    <updated>2021-08-31T06:00:00+09:00</updated>
  
    <id>https://lixelsoft.github.io/posts/firebase-cloudfunction-security/</id>
    <content src="https://lixelsoft.github.io/posts/firebase-cloudfunction-security/" />
    <author>
      <name>Lixelsoft</name>
    </author>

  
    
    <category term="Firebase" />
    
    <category term="CloudFunction" />
    
  

  
    <summary>
      





      Intro

생각해보니 CloudFunction에 보안을 적용 안해서 개나소나 전부 정보를 획득할수 있었다.
이번장에서는 Firebase Token을 이욯해서 검증된 사용자에게만 요청에 대한 응답을 주도록 구현해 보도록 하겠다.

작성중…

References



  https://github.com/firebase/functions-samples/tree/main/authorized-https-endpoint


    </summary>
  

  </entry>

  
  <entry>
    <title>Code Convension</title>
    <link href="https://lixelsoft.github.io/posts/unity-memo-copy/" rel="alternate" type="text/html" title="Code Convension" />
    <published>2021-08-31T01:00:00+09:00</published>
  
    <updated>2021-09-01T07:15:18+09:00</updated>
  
    <id>https://lixelsoft.github.io/posts/unity-memo-copy/</id>
    <content src="https://lixelsoft.github.io/posts/unity-memo-copy/" />
    <author>
      <name>Lixelsoft</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Code Convension

Intro
생각들 정리하는 차원에서 Code Convension 정리하는 글이나 작성해야겠다.
앞으로 꾸준히 변경사항이 있으면 Update하도록 하자.



Convension


  모든 네이밍은 CamelCase
  this는 사용하지 않는다.
  Indent는 2칸
  {}는 개행 없이



  파일명: 첫 글자 대문자 (class와 동일하게)
  namespace : 첫 글자 대문자
  class :  첫 글자 대문자
  public 변수 : 첫 글자 대문자
  private 변수 : _ + 첫 글자 소문자
  함수명 : 첫 글자 대문자
  매개변수 : 첫 글자 소문자



// CodeConvensionExample.cs

namespace Lixelsoft {
...
    </summary>
  

  </entry>

  
  <entry>
    <title>Firebase CloudFunction 시작하기</title>
    <link href="https://lixelsoft.github.io/posts/firebase-cloudfunction/" rel="alternate" type="text/html" title="Firebase CloudFunction 시작하기" />
    <published>2021-08-29T01:00:00+09:00</published>
  
    <updated>2021-08-31T20:18:43+09:00</updated>
  
    <id>https://lixelsoft.github.io/posts/firebase-cloudfunction/</id>
    <content src="https://lixelsoft.github.io/posts/firebase-cloudfunction/" />
    <author>
      <name>Lixelsoft</name>
    </author>

  
    
    <category term="Firebase" />
    
    <category term="CloudFunction" />
    
  

  
    <summary>
      





      Install


# firebase cli 설치.
$ npm install -g firebase-tools
# 구글 계정으로 로그인.
$ firebase login
# 새로운 프로젝트 폴더를 생성하고 해당 폴더로 이동.
$ mkdir Test &amp;amp;&amp;amp; cd ./Test
# 해당 프로젝트 폴더에서 firebase initialize를 해준다.
$ firebase init


Firebase Install

  아래와 같이 어떤 features를 선택할지 정해주는 메뉴가 나오는데 여기서 Functions를 선택해준다.
주의할 점은 스페이스바로 선택을 해주고 엔터키로 넘어가줘야함

  다음으로 프로젝트를 선택해주고 나머지 질문에 자신에게 맞는 설정을 선택해주면 된다.



Usage



  설...
    </summary>
  

  </entry>

  
  <entry>
    <title>Firebase CloudFunction 사용해서 인앱결제 검증하기 -1-</title>
    <link href="https://lixelsoft.github.io/posts/unity-firebase-cloudfunction-iapverify-1/" rel="alternate" type="text/html" title="Firebase CloudFunction 사용해서 인앱결제 검증하기 -1-" />
    <published>2021-08-28T01:00:00+09:00</published>
  
    <updated>2021-08-28T01:00:00+09:00</updated>
  
    <id>https://lixelsoft.github.io/posts/unity-firebase-cloudfunction-iapverify-1/</id>
    <content src="https://lixelsoft.github.io/posts/unity-firebase-cloudfunction-iapverify-1/" />
    <author>
      <name>Lixelsoft</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Firebase" />
    
  

  
    <summary>
      





      Create API Key


Google Play Console 서비스 계정 등록

  
    일단 영수증 검증에 사용할 API 계정을 만들어야 한다. Google Play Console -&amp;gt; 설정 -&amp;gt; API 액세스에 가서 새 서비스 계정 만들기를 클릭해서 계정 한개를 생성해 준다. 아마 아래와 같은 팝업창이 생성되고 Googole Cloud Platform으로 이동하라고 나올텐데 해당 사이트로 이동해준다.

  
  
    Google Cloud Platform에서 서비스 계정 만들기를 클릭해 주고 새로운 계정을 생성해 준다.
    
      서비스 계정 세부정보에서 계정 정보를 기입해 준다.

      액세스 권한 부여에서 편집자를 선택해서 추가해준다.

      "3"번은...
    </summary>
  

  </entry>

  
  <entry>
    <title>Firebase CloudFunction 사용해서 푸시기능 구현하기</title>
    <link href="https://lixelsoft.github.io/posts/unity-firebase-cloudfunction-fcm/" rel="alternate" type="text/html" title="Firebase CloudFunction 사용해서 푸시기능 구현하기" />
    <published>2021-08-28T01:00:00+09:00</published>
  
    <updated>2021-08-28T01:00:00+09:00</updated>
  
    <id>https://lixelsoft.github.io/posts/unity-firebase-cloudfunction-fcm/</id>
    <content src="https://lixelsoft.github.io/posts/unity-firebase-cloudfunction-fcm/" />
    <author>
      <name>Lixelsoft</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Firebase" />
    
  

  
    <summary>
      





      작성중 …

    </summary>
  

  </entry>

</feed>

